trigger:
  batch: true
  branches:
    include:
      - master
      - release/*
  paths:
    exclude:
      - README.md
      - docs/*
      - CI/*

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: UnitTests
    displayName: Unit Tests
    workspace:
      clean: all
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.x'

    - task: DotNetCoreCLI@2
      displayName: 'Ensure Report Generator on unit test projects'
      inputs:
        command: 'custom'
        projects: '**/*UnitTest*.csproj'
        custom: 'add'
        arguments: 'package ReportGenerator'

    - task: DotNetCoreCLI@2
      displayName: 'Ensure coverlet.msbuild on unit test projects'
      inputs:
        command: 'custom'
        projects: '**/*UnitTest*.csproj'
        custom: 'add'
        arguments: 'package coverlet.msbuild'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: 'test'
        arguments: '--configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
        projects: '**/*UnitTest*.csproj'

    - task: reportGenerator@4
      displayName: 'Genrate Coverage report'
      inputs:
        reports: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
        targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
        assemblyfilters: '-xunit*'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/TestResults/coverage'

  - job: Build
    displayName: Build
    workspace:
      clean: all
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: "Build docker image"
      inputs:
        containerRegistry: 'Docker Hub'
        repository: 'matthewthomas/irrigationcontroller'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest

    #If the docker file builds, then get it ready to go as an artifact            
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**'
        TargetFolder: '$(Build.StagingDirectory)'
        CleanTargetFolder: true
        
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.StagingDirectory)'
        artifact: 'app'
        publishLocation: 'pipeline'

- stage: DeployToDockerHub
  displayName: 'Deploy'
  dependsOn: Build
  jobs:
  - deployment: DeployToDockerHub
    displayName: 'Deploy To Docker Hub'
    workspace:
      clean: all
    pool:
      vmImage: 'ubuntu-latest'
    environment: DockerHub
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'app'
              targetPath: '$(Pipeline.Workspace)'

          - task: Docker@2
            displayName: "Build docker image"
            inputs:
              containerRegistry: 'Docker Hub'
              repository: 'matthewthomas/irrigationcontroller'
              command: 'buildAndPush'
              Dockerfile: '$(Pipeline.Workspace)/**/Dockerfile'
              tags: |
                $(Build.BuildId)
                latest